void cells2colors(int m, int n, int[m][n] p, int[m][n] q){
    for(int i=0; i<m; ++i){
        for(int j=0; j<n; j++) {
            assert p[i][j] == q[i][j];
        }
    }
}

void cells2colorsA(int m, int n, int[m][n] p, int[m][n] q){
    for(int i=0; i<m; ++i){
        for(int j=0; j<n; j++) {
            assume p[i][j] == q[i][j];
        }
    }
}

boolean goodConfig(int start, int stop, int run){
	return ((0 <= run && run <= 1) && (0 <= start && start <= 1) && (0 <= stop && stop <= 1) && start != stop && run == start);
}

generator int[m][n] arrexpr(int m, int n, int[m][n] p, int[m][n] q) {
    int[m][n] output;
    for(int i=0; i<m; ++i){
        for(int j=0; j<n; j++) {
            output[i][j] = expr(p[i][j],q[i][j],i,j, 1);
        }
    }
    return output;
}

generator int expr(int a, int b, int c, int d, int bound) {
    assert bound > 0;
    generator int sum(){
        return {| a | b | c | d |} * {| a | b | c | d | ?? |};
    }
    if(??) { return sum(); }
    else { return sum() + expr(a,b,c,d,bound-1); } 
}

generator int texpr(int a, int b, int c, int bound) {
    assert bound > 0;
    generator int sum(){
        return {| a | b | c |} * {| a | b | c | ?? |};
    }
    if(??) { return sum(); }
    else { return sum() + texpr(a,b,c, bound-1); } 
} 

generator void solveStart(ref int run, int start, ref int stop) {
  if (start == 0) {
      run = texpr(start,stop,run,1);
    	stop = texpr(start,stop,run,1);
  } else {
      run = texpr(start,stop,run,1);
    	stop = texpr(start,stop,run,1);
  }
}

generator void solveStop(ref int run, ref int start, int stop) {
  if (start == 0) {
      run = texpr(start,stop,run,1);
    	start = texpr(start,stop,run,1);
  } else {
      run = texpr(start,stop,run,1);
    	start = texpr(start,stop,run,1);
  }
}

void toggleButton(ref int it){
	if(it == 0){
		it = 1;
	} else {
        it = 1;
  }
}


int[n][m] colorOnClick(int n, int m, int[n][m] rendered, int[n][m] cells, int loci, int locj){
    for(int idx=0; idx<n; idx++){
        for(int j=0; j<n; j++){
            if(idx == loci && j == locj){
                if(rendered[idx][j] == 0) {
                    rendered[idx][j] = 1;
                }
                else if(rendered[idx][j] == 1){
                    rendered[idx][j] = 0;
                }
            }
        }
    }
	return rendered;
}

void golLogic(int m, int n, ref int[m][n] cells){
    int count = 0;
    int[m][n] oldCells;

    for(int i=0; i<m; ++i){
        for(int j=0; j<n; j++) {
            oldCells[i][j] = cells[i][j];
        }
    }

    for(int i=0; i<m; ++i){
        for(int j=0; j<n; j++) {
            if(i == 0){
                if (j == 0) {
                    count = oldCells[i][j+1] + oldCells[i+1][j] + oldCells[i+1][j+1];
                } 

                else if(j+1 == n) {
                    count = oldCells[i][j-1] + oldCells[i+1][j] + oldCells[i+1][j-1]; 
                }

                else {
                    count = oldCells[i][j-1] + oldCells[i][j+1] + oldCells[i+1][j-1] + oldCells[i+1][j] + oldCells[i+1][j+1];
                }
            }

            else if(i + 1 == m){
                if (j == 0) { 
                    count = oldCells[i][j+1] + oldCells[i-1][j+1] + oldCells[i-1][j];
                }

                else if(j + 1 == n){
                    count = oldCells[i][j-1] + oldCells[i-1][j-1] + oldCells[i-1][j];
                }

                else {
                    count = oldCells[i][j-1] + oldCells[i][j+1] + oldCells[i-1][j-1] + oldCells[i-1][j] + oldCells[i-1][j+1];
                }
            }

            else {
                if (j == 0){
                    count = oldCells[i-1][j] + oldCells[i+1][j] + oldCells[i-1][j+1] + oldCells[i][j+1] + oldCells[i+1][j+1];
                }

                else if(j+1 == n){
                    count = oldCells[i-1][j] + oldCells[i+1][j] + oldCells[i-1][j-1] + oldCells[i][j-1] + oldCells[i+1][j-1];
                }

                else{
                    count = count + oldCells[i-1][j] + oldCells[i-1][j-1] + oldCells[i-1][j+1] + oldCells[i+1][j] + oldCells[i+1][j-1] + oldCells[i+1][j+1] + oldCells[i][j-1] + oldCells[i][j+1];
                }
            }

        if (oldCells[i][j] == 0) {
            if (count == 2 || count == 3) {
                cells[i][j] = 1;
                }
        } else {
            if (count != 2 && count != 4) {
                cells[i][j] = 0;
               }
            }
        }
    }
}


int[m][n] buildGol(int m, int n){
    int[m][n] out;
    for(int i=0; i<m; ++i){
        for(int j=0; j<n; j++) {
            if(i%2==0) {out[i][j] = 1;}
            else {out[i][j] = 1;}
        }
    }
    return out;
}

harness void sketch (int start, int stop, int run, int m, int n) {
    m = 3;
    n = 3;
    int[m][n] rendered = buildGol(m,n);
    int[m][n] cells = rendered;
    assume goodConfig(start, stop, run);
    
    toggleButton(start);
    solveStart(start, stop, run);
    
    
    rendered = colorOnClick(m, n, rendered, cells, 1, 1);
    cells = arrexpr(m, n, cells, rendered);
    cells2colors(m,n,cells,rendered);


    golLogic(m, n, cells);
    rendered = arrexpr(m, n, cells, rendered);
    cells2colors(m,n,cells,rendered);


    toggleButton(stop); 
    solveStop(start, stop, run);

}