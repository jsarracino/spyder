void equal_arrays(int m, int n, int[m][n] p, int[m][n] q){
	for(int i=0; i<m; ++i){
		for(int j=0; j<n; j++) {
			assert p[i][j] == q[i][j];
		}
	}
}

int[m][n] incr_x(int m, int n, ref int[m][n] x, ref int[m][n] y) {
	for(int i=0; i<m; ++i){
		for(int j=0; j<n; j++) {
			x[i][j] = 2 * y[i][j];
		}
	}
	return x;
}

generator int[m][n] incr_y(int m, int n, int[m][n] y, int bnd) {
	for(int i=0; i<m; ++i){
		for(int j=0; j<n; j++) {
			y[i][j] = expr(y[i][j], bnd);
		}
	}
	return y;
}

generator int expr(int y, int bnd) {
	assert bnd > 0;
	generator int mult(){
		return {| y |} * {| y | ?? |};
	}
	if(??) { return mult(); }
	else { return mult() + expr(y, bnd-1); }
}

harness void sketch (int a, int b, int c, int d) {
	int[2][2] x = {{a,b},{c,d}};
	int[2][2] y = {{a,b},{c,d}};
	int[2][2] x1 = incr_x(2,2,x,y);
	int[2][2] y1 = incr_y(2,2,y,1);
	equal_arrays(2, 2, x1, y1);
}