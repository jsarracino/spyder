
Component 1DGoL {
  data cells : bool[]; 
  data rendered : color[];

  relation cell2color(cell : bool, color : color) {
    cell ==> color = black && !cell ==> color = white 
  }

  relation cells2colors(clls : bool[], rndered: color[]) {
    ForEach2(clls, rndered, cell2color)
  }

  always cells2colors(cells, rendered);
}

Component Startable {
  running : bool;
  start : button;
  stop : button;

  relation goodConfig(run: bool, strt: button, stp: button) {
    run <=> strt.enabled && !stp.enabled <=> start.enabled 
  }

  always goodConfig(running, start, stop);

  /*
  procedure start() {
    running = true;
    start = false;
    stop = true;
  }

  procedure stop() {
    running = false;
    start = true;
    stop = false;
  } 
  */

}

Component Main {
  // the model
  cells :: bool[];
  running :: bool;

  // the view
  rendered :: color[];
  start :: button;
  stop :: button;

  using Startable(running, start, stop);
  using 1DGoL(cells, rendered);
  using History(cells, index, history);

  init() { // only the main component can have an init
    cells = ...; // for main, values need to be initialized.
    rendered = ...;

    foreach color in rendered:
      color.onclick = colorOnClick;

    start.onclick = toggleButtons;
    start.enabled = true;
    stop.onclick = toggleButtons;
    stop.enabled = false;
    running = false;

    setInterval golLogic 1000;
  }

  function colorOnClick(clickedColor) {
    if (clickedColor == White) {
      clickedColor = Black;
    } else {
      clickedColor = White;
    }
  }

  function toggleButtons(clickedButton) {
    start.enabled = !start.enabled;
    stop.enabled = !stop.enabled;

    // @ inferred:
    running = !running;
  }


  function golLogic(){
    for (cell, i) in enumerate cells:
      ... blah using i...
  }
}
