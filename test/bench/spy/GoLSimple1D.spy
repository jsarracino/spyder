Component Startable {
  data running : int; // bool, = 0 or 1
  data start : int; // button
  data stop : int;  // button

  relation goodConfig(run: int, strt: int, stp: int) {
    (0 <= run && run <= 1) && (0 <= strt && strt <= 1) && (0 <= stp && stp <= 1) && run = strt && strt != stp
  }

  always goodConfig(running, start, stop);

}


Component OneDGoL {
  data cells : int[]; 
  data rendered : int[];

  // black == 0
  // white == 1

  relation cells2colors(clls : int[], rndered: int[]) {
    foreach (c, r) in (clls, rndered) {
      c = r
    }
  }

  always cells2colors(cells, rendered);
}




Component Main {
  // the model
  data cells : int[]; // bool[]
  data running : int; // bool

  // the view
  data rendered : int[]; // color
  data start : int; // button
  data stop : int; // button

  using Startable(running, start, stop);
  using OneDGoL(cells, rendered);
  //using History(cells, index, history);

  /*
  init() { // only the main component can have an init
    cells = ...; // for main, values need to be initialized.
    rendered = ...;

    foreach color in rendered:
      color.onclick = colorOnClick;

    start.onclick = toggleButtons;
    start.enabled = true;
    stop.onclick = toggleButtons;
    stop.enabled = false;
    running = false;

    setInterval golLogic 1000;
  }
  */

/*
  procedure colorOnClick() {
    let locIndex: int; // unknown value. we would use a function param but the synthesis part is broken.
    for (cll : int, color: int) with idx in (cells, rendered) {
      if (idx == locIndex) {
        if (color == 0) {
          color = 1;
        } else {
          color = 0;
        }
      }
    }
    
  }

*/

/*
  procedure toggleButtons() {
    if (start == 0) {
      start = 1;
    }
    if (start == 1) {
      start = 0;
    }
    if (stop == 0) {
      stop = 1;
    }
    if (stop == 1) {
      stop = 0;
    }
  }
  */

  // from http://jonmillen.com/1dlife/index.html

  // YYXYY
  // a dead cell X is alive if 2 or 3 of Y are alive
  // a live cell X stays alive if 2 or 4 of Y are alive
  
  procedure golLogic(){
    let uBound: int; // don't actually know the range of the cells
    let count : int = 0;

    for (cell: int) with idx in (cells) {
      if (idx == 0) {

        if (idx + 1 == uBound) { // no slack
          // continue
        } else if (idx + 2 == uBound) {
          // just one cell
          count = cells[idx+1];
        } else {
          // two cells
          count = cells[idx+1] + cells[idx+2];
        }

      } else if (idx == 1) {
        count = cells[idx-1];

        if (idx + 1 == uBound) {
          // continue
        } else if (idx + 2 == uBound) {
          count = count + cells[idx+1];
        } else {
          count = count + cells[idx+1] + cells[idx+2];
        }

      } else {
        count = cells[idx-1] + cells[idx-2];

        if (idx + 2 == uBound) {

        } else if (idx + 1 == uBound) {
          count = count + cells[idx+1];
        } else {
          count = count + cells[idx+1] + cells[idx+2];
        }

      }

      if (cell == 0) {
        if (count == 2 || count == 3) {
          cell = 1;
        }
      } else {
        if (count != 2 && cell != 4) {
          cell = 0;
        }
      }
    }
  }
  
}
