void equal_arrays(int n, int[n] p, int[n] q){
	for(int i=0; i<n; ++i){
		assert p[i] == q[i];
	}
}

int[n] incr_z(int n, int[n] x) {
	for(int i=0; i<n; i++){
		x[i] = x[i] + 1;
	}
	return x;
}

generator int[n] incr_y(int n, int[n] y, int bnd) {
	for(int i=0; i<n; i++){
		y[i] = expr(y[i], bnd);
	}
	return y;
}

generator int expr(int y, int bnd) {
	assert bnd > 0;
	generator int mult(){
		return {| y |} * {| y | ?? |};
	}
	if(??) { return mult(); }
	else { return mult() + expr(y, bnd-1); }
}

int[n] buildGol(int n){
	int[n] out;
	for(int i = 0; i < n; ++i){
        if(i%2==0) {out[i] = 1;}
        else {out[i] = 1;}
    }
    return out;
}

harness void sketch (int a, int b, int c, int n) {
	n = 10;
	int[n] x = buildGol(n);
	int[n] y = buildGol(n);
	int[n] z = buildGol(n);
	int[n] x1 = incr_z(n,x);
	int[n] y1 = incr_y(n,y,1);
	int[n] z1 = incr_y(n,z,1);
	equal_arrays(n, x1, y1);
	equal_arrays(n, y1, z1);

	int[n] y2 = incr_z(n,y);
	int[n] x2 = incr_y(n,x,1);
	int[n] z2 = incr_y(n,z,1);
	equal_arrays(n, x2, y2);
	equal_arrays(n, y2, z2);

	int[n] z3 = incr_z(n,z);
	int[n] x3 = incr_y(n,x,1);
	int[n] y3 = incr_y(n,y,1);
	equal_arrays(n, x3, y3);
	equal_arrays(n, y3, z3);


}