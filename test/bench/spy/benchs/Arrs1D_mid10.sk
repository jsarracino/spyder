void noteq_arrays(int n, int[n] p, int[n] q){
	for(int i=0; i<n; ++i){
		assert p[i] != q[i];
	}
}

void midarrs(int n, int[n] x, int[n] y, int[n] z) {
	for(int i=0; i<n; ++i){
		assert 2 * z[i] == x[i] + y[i];
	}
}
 
int[n] incr_z(int n, ref int[n] x) {
	for(int i=0; i<n; i++){
		x[i] = x[i] + 1;
	}
	return x;
}

generator int[n] incr_y(int n, ref int[n] y, int bnd) {
	for(int i=0; i<n; i++){
		y[i] = expr(y[i], bnd);
	}
	return y;
}

generator int expr(int y, int bnd) {
	assert bnd > 0;
	generator int mult(){
		return {| y |} * {| y | ?? |};
	}
	if(??) { return mult(); }
	else { return mult() + expr(y, bnd-1); }
}

int[n] xbuildGol(int n){
	int[n] out;
	for(int i = 0; i < n; ++i){
        out[i] = 1;
    }
    return out;
}

int[n] ybuildGol(int n){
	int[n] out;
	for(int i = 0; i < n; ++i){
		out[i] = 3;
    }
    return out;
}

int[n] zbuildGol(int n){
	int[n] out;
	for(int i = 0; i < n; ++i){
		out[i] = 2;
    }
    return out;
}

harness void sketch (int a, int b, int c, int n) {
	n = 10;
	int[n] x = xbuildGol(n);
	int[n] y = ybuildGol(n);
	int[n] z = zbuildGol(n);
    assume noteq_arrays(n,x,y);
    assume midarrs(n,x,y,z);
	int[n] z1 = incr_z(n,z);
	int[n] x1 = incr_y(n,x,1);
	int[n] y1 = incr_y(n,y,1);
	noteq_arrays(n, x1, y1);
	midarrs(n,x1,y1,z1);
}