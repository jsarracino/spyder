void goodConfig(int start, int stop, int run){
	assert ((0 <= run && run <= 1) && (0 <= start && start <= 1) && (0 <= stop && stop <= 1) && start != stop && run == start);
}

void cells2colors(int n, int[n] p, int[n] q){
	for(int i=0; i<n; ++i){
		assert p[i] == q[i];
	}
}

generator int[n] arrexpr(int n, int r, ref int[n] p, int[n] q) {
	for(int i=0; i<n; i++){
		p[i] = expr(r, p[i], q[i], 1);
	}
	return p;
}

generator int expr(int x, int y, int z, int bnd) {
	assert bnd > 0;
	generator int mult(){
		return ?? * {| x | y | ?? |};
	}
	if(??) { return mult(); }
	else { return mult() + expr(x,y,z,bnd-1); }
}

int[n] colorOnClick(int n, ref int[n] rendered, int[n] cells, int locIndex){
	for(int idx=0; idx<n; idx++){
		if(idx == locIndex){
			if(rendered[idx] == 0) {
				rendered[idx] = 1;
			}
			else if(rendered[idx] == 1){
				rendered[idx] = 0;
			}
		}
	}
	return rendered;
}

int toggleStart(int start, int stop, int run){
	if(start == 0){
		start = 1;
    }
    else if(start == 1){
		start = 0;
    }
	return start;
}

int toggleStop(int start, int stop, int run){
	if(stop == 0){
		stop = 1;
    }
    else if(stop == 1){
		stop = 0;
    }
	return stop;
}

int[n] golLogic(int uBound, int n, int[n] cells, int idx, int[n] rendered){
    int count = 0;
    int[n] oldCells;

	for(int i=0; i<n; i++){
		oldCells[i] = cells[i];
	}

	for(int i=0; i<n; i++){
		if(idx == 0){
			if (idx + 1 == uBound) { 
		    } if (idx + 2 == uBound) {
				count = oldCells[idx+1];
        	} else {
				count = oldCells[idx+1] + oldCells[idx+2];
        	}
		}

		if (idx == 1) {
			count = oldCells[idx-1];

        	if (idx + 1 == uBound) {
	        } if (idx + 2 == uBound) {
				count = count + oldCells[idx+1];
        	} else {
				count = count + oldCells[idx+1] + oldCells[idx+2];
        	}
		}

		else {
			count = oldCells[idx-1] + oldCells[idx-2];

        	if (idx + 1 == uBound) {
			} else if (idx + 2 == uBound) {
				count = count + oldCells[idx+1];
        	} else {
				count = count + oldCells[idx+1] + oldCells[idx+2];
        	}
      	}

    	if (oldCells[idx] == 0) {
        	if (count == 2 || count == 3) {
				cells[idx] = 1;
        		}
    	} else {
       		if (count != 2 && count != 4) {
				cells[idx] = 0;
        	}
    	}
  	}
	return cells;
}

int[n] buildGol(int n){
	int[n] out;
    for(int i = 0; i < n; ++i){
        if(i%2==0) {out[i] = 1;}
        else {out[i] = 0;}
    }
    return out;
}

harness void sketch (int start, int stop, int run, int n, int idx) {
	n = 10;
	int[n] rendered = buildGol(n);
	int[n] cells = buildGol(n);
    cells2colors(n,cells,rendered);
	int[n] nrendered = colorOnClick(n,rendered,cells,idx);
	int[n] ncells = arrexpr(n, idx, cells, nrendered);
    cells2colors(n,ncells,nrendered);
	int start1 = toggleStart(start,stop,run);
	int run1 = expr(start,stop,run,1);
	int stop1 = expr(start,stop,run,1);
    goodConfig(start1,stop1,run1);
	int stop2 = toggleStop(start,stop,run);
	int start2 = expr(start,stop,run,1);
	int run2 = expr(start,stop,run,1);
	goodConfig(start2,stop2,run2);
	int[n] lcells = golLogic(n,n,cells,idx,rendered);
	int[n] lrendered = arrexpr(n,idx,rendered,cells);
	cells2colors(n, lcells, lrendered);
    
}