void cells2colors(int n, int[n] p, int[n] q){
	for(int i=0; i<n; ++i){
		assert p[i] == q[i];
	}
}

generator int[n] arrexpr(int n, ref int[n] p, int[n] q) {
	for(int i=0; i<n; i++){
		p[i] = expr(p[i], q[i], i);
	}
	return p;
}

generator int expr(int a, int b, int c) {
    generator int sum(){
        return {| a | b | c |} * {| a | b | c | ?? |};
    }
    if(??) { return sum(); }
    else { return sum() + expr(a,b,c); } 
}

generator void colorOnClick(int n, int[n] rendered, int[n] cells, int locIndex){
	for(int idx=0; idx<n; idx++){
		if(idx == locIndex){
			if(rendered[idx] == 0) {
				rendered[idx] = 1;
				int[n] ncells = arrexpr(n, cells, rendered);
				cells2colors(n, ncells, rendered);
			}
			else if(rendered[idx] == 1){
				rendered[idx] = 0;
				int[n] ncells = arrexpr(n, cells, rendered);
				cells2colors(n, ncells, rendered);
			}
		}
	}
}

generator void golLogic(int uBound, int n, int[n] cells, int idx, int[n] rendered){
    int count = 0;
    int[n] oldCells;

	for(int i=0; i<n; i++){
		oldCells[i] = cells[i];
	}

	for(int i=0; i<n; i++){
		if(idx == 0){
			if (idx + 1 == uBound) { 
		    } if (idx + 2 == uBound) {
				count = oldCells[idx+1];
        	} else {
				count = oldCells[idx+1] + oldCells[idx+2];
        	}
		}

		if (idx == 1) {
			count = oldCells[idx-1];

        	if (idx + 1 == uBound) {
	        } if (idx + 2 == uBound) {
				count = count + oldCells[idx+1];
        	} else {
				count = count + oldCells[idx+1] + oldCells[idx+2];
        	}
		}

		else {
			count = oldCells[idx-1] + oldCells[idx-2];

        	if (idx + 1 == uBound) {
			} else if (idx + 2 == uBound) {
				count = count + oldCells[idx+1];
        	} else {
				count = count + oldCells[idx+1] + oldCells[idx+2];
        	}
      	}

    	if (oldCells[idx] == 0) {
        	if (count == 2 || count == 3) {
				cells[idx] = 1;
				int[n] nrendered = arrexpr(n, rendered, cells);
				cells2colors(n, cells, nrendered);
        		}
    	} else {
       		if (count != 2 && count != 4) {
				cells[idx] = 0;
				int[n] nrendered = arrexpr(n, rendered, cells);
				cells2colors(n, cells, nrendered);
        	}
    	}
  	}
}

int[n] buildGol(int n){
	int[n] out;
    for(int i = 0; i < n; ++i){
        if(i%2==0) {out[i] = 1;}
        else {out[i] = 0;}
    }
    return out;
}

harness void sketch (int start, int stop, int run, int n) {
	n = 4;
	int[n] rendered = buildGol(n);
	int[n] cells = rendered;
	colorOnClick(n, rendered, cells, 1);
	golLogic(n, n, cells, 1, rendered);
}	