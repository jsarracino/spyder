Component Startable {
  data running : int; // bool, = 0 or 1
  data start : int; // button
  data stop : int;  // button

  relation goodConfig(run: int, strt: int, stp: int) {
    (0 <= run && run <= 1) && (0 <= strt && strt <= 1) && (0 <= stp && stp <= 1) && run = strt && strt != stp
  }

  always goodConfig(running, start, stop);

}


Component TwoDGoL {
  data cells : int[][]; 
  data rendered : int[][];

  // black == 0
  // white == 1

  relation cells2colors(clls : int[][], rndered: int[][]) {
    foreach (cc, rr) in (clls, rndered) {
      foreach (c, r) in (clls, rndered) {
        c = r
      }
    }
  }

  always cells2colors(cells, rendered);
}


Component Main {
  // the model
  // data oldCells : int[]; // bool[]
  data cells : int[][]; // bool[]
  data running : int; // bool

  // the view
  data rendered : int[][]; // color
  data start : int; // button
  data stop : int; // button

  using Startable(running, start, stop);
  using TwoDGoL(cells, rendered);

  
  procedure colorOnClick() {
    let row: int; 
    let col: int;
    for (colors: int[]) with ri in (rendered) {
      for (color: int) with ci in (colors) {
        if (ri == row && ci == col) {
          if (color == 0) {
            color = 1;
          } else {
            color = 0;
          }
        }
      }
    }
  }
  
  

  procedure toggleStart() {
    if (start == 0) {
      start = 1;
    } else if (start == 1) {
      start = 0;
    } else {
    }
  }

  procedure toggleStop() {
    if (stop == 0) {
      stop = 1;
    } else if (stop == 1) {
      stop = 0;
    }
  }



  // from http://jonmillen.com/1dlife/index.html

  // TTT
  // YXY
  // ZZZ
  // a live cell X stays alive if 2 or 3 of T,Y,Z are alive
  // a live cell X dies if <2 or >3 of T,Y,Z are alive
  // a dead cell X lives if 3 of T,Y,Z
  
  
  procedure golLogic(){
    let uBound: int; // don't actually know the range of the cells
    let count : int = 0;
    let T0: int;
    let T1: int;
    let T2: int;
    let Y0: int;
    let Y2: int;
    let Z0: int; 
    let Z1: int;
    let Z2: int;

    for (oc: int) in (cells) {
      oldCell = oc;
    }

    // TODO
    for (cell: int) with idx in (cells) {
      if (idx == 0) {

        if (idx + 1 == uBound) { // no slack
          // continue
        } else if (idx + 2 == uBound) {
          // just one cell
          count = oldCellFuture; //oldCells[idx+1];
        } else {
          // two cells
          count = oldCellFuture + oldCellFuture2; 
        }

      } else if (idx == 1) {
        count = oldCell;
        if (idx + 1 == uBound) {
          // continue
        } else if (idx + 2 == uBound) {
          count = count + oldCellFuture;
        } else {
          count = count + oldCellFuture + oldCellFuture2; 
        }

      } else {
        count = oldCellPrev + oldCellPrev2;

        if (idx + 1 == uBound) {

        } else if (idx + 2 == uBound) {
          count = count + oldCellFuture;
        } else {
          count = count + oldCellFuture + oldCellFuture2;
        }

      }

      if (oldCell == 0) {
        if (count == 2 || count == 3) {
          cell = 1;
        }
      } else {
        if (count != 2 && count != 4) {
          cell = 0;
        }
      }
    }
  }

  
  
}
